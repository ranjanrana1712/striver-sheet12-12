

#include<bits/stdc++.h>
using namespace std;
 
 void explainVector(){
     vector<int> v;
     v.push_back(1);
     v.emplace_back(2);
     
     //using pair in vector
     vector<pair<int,int>>vect;
     v.push_back({1,2});
     v.emplace_back(1,2);
     //5 is the size and 10 instance
     //{10,10,10,10,10}
     vector<int>v(5,10);
     
     vector<int>v(5);
     
     vector<int>v1(5,10);
     
     //to copy the content of v1 into v2
     vector<int> v2(v1);
     
     //---------------------------iterators------------------------------------------
     // iterators are use to access the address of an element 
     //syntax
     vector<int>::iterator it = v.begin();
     //
     it++;
     // it is use to display the element 
     cout<< *(it);
     
     // increasing the address of it by 
     
     it = it + 2;
     cout<<*(it)<<" ";
     //points to a memory address of after last emlement 
     vector<int>::iterator it = v.end();
     // point to a memory address before firt element
     //reverse end
     vector<int>::iterator it = v.rend();
     //it is like  a reverse iterator
     vector<int>::iterator it = v.rbegin();
    
    //---------------------------printing vectors------------------------------------------
     //  using for loop
     
     for(vector<int>::iterator it = v.begin();it != v.end();it++){
         cout<<*(it)<<" ";
     }
     
     //using auto,auto keyword assigns the datatype automatically 
     
     for(auto it = v.begin(); it != v.end();it++){
         cout<<*(it)<<" ";
         
         
     // using for each loop to print vector 
     
     
     for(auto it = v){the 
         cout<< it<<" ";
//-----------------------------------------------Deleting the elements of vector------------------------------------------------------\

//{10,20,30}
v.erase(v.begin()+1);

//to print multiples elements
//[start,end)
v.erase(v.begin()+2,v.begin()+4);
}

//-----------------------------------------------Inserting element in vector--------------------------------------------------------

vector<int>v(2,100) //{100,100}
v.insert(v.begin(),300); // {300,100,100}
v.insert(v.begin()+1,2,10); //{300,10,10,100,100,}


vector<int>copy(2,50); //{50,50}

v.insert(v.begin(),copy begin(),copy.end());//{50,50,300,10,10,100,100}

///////////////size of vector//////////////
//{10,20}
cout<<v.size(); //2

v.pop_back(); // {10}

// v1 = {1,2}
//v2 = {3,4}

v1.swap(v2);

v1.clear(); ///clear the vector 
cout<<v.empty(); // check if the vector is empty, true = if empty ,fale = non empty

---------------------------------------------list-----------------------------------------------------------------------
---------------------------------------------    ------------------------------------------------------------------------
//it same as vector,only difference is that it provides front end operation.

//function using list

void explainlist(){
//list syntax
ls<int>ls;
ls.push_back(2);//{2}
ls.emplace_back(3);//{2,3}
ls.push-front(5);//{5,2,3}
ls.emplace_front();//{2,3}

---------------------------------------------STACK------------------------------------------------------------------
---------------------------------------------    ------------------------------------------------------------------------
// STACK WORKS IN LAST IN FIRST OUT

//CREATING SYNTAX
Stack<int>st;
st.push(1);
st.push(2);
st.push(3);
st.emplace(4);

cout<<st.top();//4
cout<<st.pop();//{3,2,1}
cout<<st.top();//3
cout<<st.size();//3
cout<<st.empty(); // false
stack<int>st1,st2;
st1.swap(st2);

--------------------------------------------------------------------------------------------------------------------
---------------------------------------------QUEUE----------------------------------------------------------------------
//IT WORKS IN FIFO FASHION 
queue<int>q;

q.push(1);//{1}
q.push(2);//{1,2}
q.emplace(4};//{1,2,4}
q.back() +=5;//{1,2,9}
cout<<q.back();//prints 9
cout<<q.front();//prints1
q.pop();//{2,9};
cout<<q.front();//2

--------------------------------------------------------------------------------------------------------------------
---------------------------------------------priority queue----------------------------------------------------------------------
//data are stored in priority order

void pq(){
    pq.push(1);//{1}
    pq.push(2);//{1,2}
    pq.push(8);//{1,2,8}
    pq.push(5);//{1,2,5,8}
    
    cout<<pq.top();// 1
    
    //Time complexity of  push == logn   & pop ==  logn & top = 0(1)
    //* The data inside is stored in tree format
    
    --------------------------------------------------------------------------------------------------------------------
--------------------------------------------SET---------------------------------------------------------------------
   //Set has two important characteristic and they are 
   // *** all the elements are sorted in order
   // *** all the element are unique
   
   void set(){
set<int>st;
st.insert(1);//{1}
st.insert(2);//{1,2}
st.insert(2);//{1,2} //no duplicate elements
st.insert(4);//{1,2,4} 
st.insert(3);//{1,2,3,4}// in order

// {1,2,3,4,5}
auto it = st.find(3); // o/p address of 3 
auto it = st.find(6); // o/p st.end()

st.erase(5); // {1,2,3,4}

int cnt = st.count(1); // if 1 found in container then it return true or else 0.

auto it = st.find(3);
st.eraser(it);////deletes 3

// {1,2,3,4,5}

auto it1 = st.find(2);

auto it2 = st.find(3);

st.erase(it1,it2);

// lower bound returns first element in range

auto it = st.lower_bound(2);

//upper_bound function returns an iterator pointing to the last element in the range 

auto it = st.upper_bound(3):
 --------------------------------------------------------------------------------------------------------------------
-------------------------------------------- MULTISET---------------------------------------------------------------------
\\ IT IS SAME AS SET BUT IT DOES NOT  * HAVE UNIQUE ELEMENTS* 
\\ ALL THE ELEMENTS ARE SORTED 
 
 Void ms(){
multiset<int>ms;

ms.insert(1)//{1}
ms.insert(1)//{1,1}
ms.insert(1)//{1,1,1}

ms.erase(1); //all the 1's erased
int cnt = m.count(1);

ms.erase(ms.find(1));//{1,1}

ms.erase(ms.find(1),ms.find(1)+2);//{}

 --------------------------------------------------------------------------------------------------------------------
--------------------------------------------UNORDERED SET ---------------------------------------------------------------------

// THE ELEMENTS ARE UNORDERED
// BUT THE ELEMENTS ARE UNIQUE

// ALL FUNCTIONS WORK SAME AS SET AND MULTISET BUT LOWER_BOUND AND UPPER_BOUND DONT WORK
// TIME COMPLEXITY IS O(1)
// IN WORST CASE IT WILL BE O(N) 


--------------------------------------------------------------------------------------------------------------------
--------------------------------------------MAP ---------------------------------------------------------------------
//map consists of key and value {key,value}
// keys must be present in ordered.
// Time complexity is logn
void map(){
map<int,int>mpp;
map<int,pair<int,int>>mpp;
map<pair<int,int>,int>mpp;

map[1]=2;//{1,2}
mapp.emplace({3,1}); //{1,2}{3,1}
mapp.insert({2,4});//{1,2}{2,4}{3,1}

//{1,2}{2,4}{3,1}

//traversing throug the map

for(auto it : mpp){
cout<< it.first<<" "<<it.second<<endl;}

cout<<mpp[1];// 2
cout<<mpp[5]; // null or 0

auto it = mpp.find(3)

cout<<*(it) .second;


auto it = mpp.find(5);
auto it = mpp.upper_bound();

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------MULTIMAP ---------------------------------------------------------------------
 // IT IS ORDERED
 // IT CAN HAVE DUPLICATES KEYS
 
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------UNORDERED MAP-,----------------------------------------------------------------
// THE ELEMENTS ARE NOT ORDERED
// KEYS ARE PRESENT IN RANDOM ORDER .
// IT IS UNIQUE , NO DUPLICATES KEYS ARE ALLOWED 
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------ALGORITHM ---------------------------------------------------------------------

// {1,3,5,2}
sort(n,a+n);
sort(v.begin(),v.end());

// sorting from particular index
//  {1,3,5,2}
sort(a+2,a+4) //{1,3,2,5}

// to print in descending order
//{1,3,5,2}
 sort(a,a+n,great<int>)
 o/p {5,3,2,1}

--------------------------------------- _builtin_popcount-------------------------------------------------------------------
// _built_popcount();
this function return number of ones in bits 

int num = 7;
int cnt = _built_popcount(); // 3

/// 

string s = '123';
sort(s.begin(),s.end());
 do{
    cout<<s<<endl;
    
    while(next_permutation(s.begin(),s.end());
    }
    int max i = *max_element (a,a+n)
   /// o/p  123 132 321 .. 




















     
     
     
     
     
     
     
     
     
 
