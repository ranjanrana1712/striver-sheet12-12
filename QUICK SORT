what is quick sort
why quick sort? because it has better time complexity as compared to merge sort
we select a pivot point and divide the array in two halves
we perform recursion on left and right side of array


#include<bits/stdc++.h>
#include<vector>
using namespace std;
int partition (vector<int> &arr, int low,int high){
    //choosing pivot point and assigning to index value 0
    int pivot = arr[low];
    //1st pointer is pointing at first element of array
    int i = low;
    //2nd pointer is pointing at last element of array
    int j = high;
    //go and perform operation only when i value is less than j
    while(i<j){
        //once the below condition fails the ith pointer on arr will stop and ready for swap  with j
        while(arr[i]<=pivot && i<=high-1){
            //keep moving to next element
            i++;
        }
        //j pointer is coming from left hand side
        //once the below condition fails the jth pointer on arr will stop and ready for swap  with i
        while(arr[j] > pivot && j>=low+1){
            j--;
        }
        
        if(i<j) swap(arr[i],arr[j]);
    }
    
    swap(arr[low],arr[i]);
    return j;
}
void qs(vector<int> &arr,int low,int high){
    if(low<high){
        int pindex = partition(arr,low,high);
        qs(arr,low,pindex-1);
        qs(arr,high,pindex);
    }
}

vector<int>quicksort(vector<int>arr){
    qs(arr,0,arr.size()-1);
    return arr;
}


int main(){
    vector<int> arr = {4,6,2,5,7,9,13};
    //size of arr
    int n = arr.size();
    cout<<"before using quick sort:"<<endl;
    for(int i =0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    
    arr = quicksort(arr);
    
    cout<<"after quick sort:"<<"\n";
    for(int i =0;i<n;i++){
        cout<<arr[i] << " ";
    }
    cout<<"\n";
    return 0;
    
}


time complexity is o(nlogn)
space complexit is o(1)
